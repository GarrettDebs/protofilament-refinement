#!/usr/bin/env python

from pf_refinement import Sub, SubStar, StarOp
from argparse import ArgumentParser
import numpy as np
import os

if __name__ == "__main__":
    
    parser=ArgumentParser()
    parser.add_argument('--star_file')
    parser.add_argument('--cores', default=1, type=int)
    args=parser.parse_args()
    
    if args.cores>1:
        b(args.star_file, cores=args.cores)
        b.parallel()
    else:
        a=SubStar()
        a()
        
        ###Generate the symmeterized starfile
        sym=StarOp(a.star_file)
        sym.symStar()
        
        if a.cores>1:
            cores=min(a.cores, a.num_pfs)
            try:
                slurm=os.environ['SLURM_NODELIST']
                command='mpirun -host %s -n %g cf_relion_subtract '\
                '--star_file %s --cores %g'%(slurm, cores, a.star_file, cores)
            except Exception:
                command='mpirun -n %g cf_relion_subtract --star_file %s '\
                '--cores %g'%(cores, a.star_file, cores)
            os.system(command)
        else:
            b=Sub(a.star_file)
            for i in range(a.num_pfs):
                b(i)